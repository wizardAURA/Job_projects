// Mocks generated by Mockito 5.4.6 from annotations
// in food_order/test/features/food_order/bloc/restaurant_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:food_order/data/models/menu_item.dart' as _i5;
import 'package:food_order/data/models/restaurant.dart' as _i4;
import 'package:food_order/data/repository/food_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FoodRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodRepository extends _i1.Mock implements _i2.FoodRepository {
  MockFoodRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Restaurant>> getRestaurants() =>
      (super.noSuchMethod(
            Invocation.method(#getRestaurants, []),
            returnValue: _i3.Future<List<_i4.Restaurant>>.value(
              <_i4.Restaurant>[],
            ),
          )
          as _i3.Future<List<_i4.Restaurant>>);

  @override
  _i3.Future<List<_i5.MenuItem>> getMenu(String? restaurantId) =>
      (super.noSuchMethod(
            Invocation.method(#getMenu, [restaurantId]),
            returnValue: _i3.Future<List<_i5.MenuItem>>.value(<_i5.MenuItem>[]),
          )
          as _i3.Future<List<_i5.MenuItem>>);

  @override
  _i3.Future<String> placeOrder(List<dynamic>? items) =>
      (super.noSuchMethod(
            Invocation.method(#placeOrder, [items]),
            returnValue: _i3.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#placeOrder, [items]),
              ),
            ),
          )
          as _i3.Future<String>);
}
